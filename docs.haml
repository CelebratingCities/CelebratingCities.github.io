!!!
%html{:lang => "en"}
  %head
    %meta{:charset => "UTF-8"}
      %meta{:content => "initial-scale=1,maximum-scale=1,user-scalable=no", :name => "viewport"}/
      %title Uber's Celebrating Cities Hackathon
      / Favicon
      %link{:href => "img/uber-favicon.png", :rel => "shortcut icon", :type => "image/x-icon"}/
      / Latest compiled and minified CSS
      %link{:href => "css/bootstrap.min.css", :rel => "stylesheet"}
        / Optional theme
        %link{:href => "css/bootstrap-theme.min.css", :rel => "stylesheet"}
          %link{:href => "css/added_style.css", :rel => "stylesheet"}
            / Latest compiled and minified JavaScript
            %script{:src => "js/jquery.min.js"}
            %script{:src => "js/bootstrap.min.js"}
            / Mapbox docs
            %script{:src => "js/mapbox-gl.js"}
            %link{:href => "css/mapbox-gl.css", :rel => "stylesheet"}/
            / Fonts
            %link{:href => "https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css", :rel => "stylesheet"}
              / <link href='https://fonts.googleapis.com/css?family=Lato:400,300' rel='stylesheet' type='text/css'>
              %link{:href => "css/uber-fonts.css", :rel => "stylesheet"}
  %body
    %nav.navbar.navbar-inverse.navbar-fixed-top
      .container-fluid
        / Brand and toggle get grouped for better mobile display
        .navbar-header
          %button.navbar-toggle.collapsed{"aria-expanded" => "false", "data-target" => "#bs-example-navbar-collapse-1", "data-toggle" => "collapse", :type => "button"}
            %span.sr-only Toggle navigation
            %span.icon-bar
            %span.icon-bar
            %span.icon-bar
          %a.navbar-brand{:href => "index.html"} Celebrating Cities
        #bs-example-navbar-collapse-1.collapse.navbar-collapse
          .navbar-form.navbar-right.expanding-sf
            .form
              %span.toggle
              %form#searchform{:action => "javascript: search()", :method => "get", :role => "search"}
                %input#s{:name => "s", :placeholder => "Search Datasets", :type => "text", :value => ""}
                  %input#searchsubmit{:type => "submit", :value => ""}
          %ul.nav.navbar-nav.navbar-right
            %li
              %a{:href => "index.html"}
                Home
                %span.sr-only (current)
            %li
              %a{:href => "intro.html"} Intro
            %li
              %a{:href => "https://celebratingcities.data.socrata.com/"} Data
            / <li><a href="http://celebratingcities.deloittegeo.opendata.arcgis.com/">Data</a></li>
            / <li class="active"><a href="docs.html">Docs</a></li>
        / /.navbar-collapse
      / /.container-fluid
    #banner-head.text-center
      .col-xs-12
        %h1.text-center.vertical-align Documentation
        %hr
          / <h4>Help us revitalize communities, create pathways to work, and connect hardworking Americans to a better quality of life</h4>
          / <h4>February 19<sup>th</sup>-21<sup>st</sup>, 2016</h4>
    .spacer
    #toTop{:style => ""}
      %a{"data-placement" => "bottom", "data-toggle" => "tooltip", :href => "#", :title => "Back to Top"}
        %i.fa.fa-arrow-up.fa-3x
    .container
      .row
        #leftCol.col-md-3
          %ul#sidebar.nav.nav-stacked
            %li
              %a{:href => "#sec0"} Introduction
            %li
              %a{:href => "#sec1"} Example Queries
            %li
              %a{:href => "#sec2"} Query Parameters
            %li
              %a{:href => "#sec3"} Data Dictionaries
            %ul
              %li
                %a{:href => "#dd0"} Location Affordability Index
              / <li><a href="#dd1">Test1</a></li>
            / <li><a href="#sec4">FAQs</a></li>
        / <div class="hidden-md hidden-lg" id="leftColsm">
        / <ul class="nav nav-stacked">
        / <li><a href="#sec0">Section 0</a></li>
        / <li><a href="#sec1">Section 1</a></li>
        / <li><a href="#sec2">Section 2</a></li>
        / <li><a href="#sec3">Section 3</a></li>
        / <li><a href="#sec4">Section 4</a></li>
        / </ul>
        / </div>
        #mainCol.col-md-9{:style => "background-color:white;padding-bottom:100px"}
          %br
            %h2#sec0 Celebrating Cities Public Data API Service
            %p
              So you want to win that hackathon or build the next hot open data app? Follow this guide to get yourself started. Make sure you check out the more detailed resources in Socrata's
              %a{:href => "dev.socrata.com", :target => "_blank"} Dev Portal
              when it’s time to get in deep
              %p
                %p
                  We are using Socrata's REST API,
                  %a{:href => "https://dev.socrata.com/consumers/getting-started.html", :target => "_blank"} SODA API
                  \. This service accepts several queries, including geospatially-enabled queries, which should allow you to make very specific requests.
                %hr.col-md-12
                  %p
                    %strong Getting Started:
                  %p
                    All datasets are currently hosted on
                    %a{:href => "https://celebratingcities.data.socrata.com/", :target => "_blank"} Socrata's Open Data portal
                    which provides the REST
                    = succeed "." do
                      %a{:href => "https://dev.socrata.com/consumers/getting-started.html", :target => "_blank"} SODA API

                  %p
                    Every
                    %a{:href => "http://www.socrata.com", :target => "_blank"} Socrata
                    open dataset has a built-in SODA API. But how you find the API endpoint can vary a bit.
                  %p If you’re viewing a DataLens, there will be a prominent “API” button in the upper left of the page. Click that, and you’ll get details on the API endpoint and a link to API documentation.
                  %p
                    If you’re on a Socrata dataset, identifiable by the colorful buttons at the upper right, don’t fret. Every Socrata dataset has a built-in open data API, so you’ll be just fine. Click on
                    %code.highlighter-rouge Export
                    and then
                    %code.highlighter-rouge API
                    and you’ll find the API endpoint under
                    = succeed "." do
                      %code.highlighter-rouge API Access Endpoint
                    .well
                      Read the detailed documentation on
                      %a{:href => "https://dev.socrata.com/docs/endpoints.html", :target => "_blank"} API Endpoints
                      for more info.
                  %p
                    For this example, we’ll use this listing of
                    %a{:href => "https://celebratingcities.data.socrata.com/DC/DC-Crime-Incidents-2015/ry83-tbhc", :target => "_blank"} DC Crime Incidents 2015.

                  %pre
                    %a{:href => "https://celebratingcities.data.socrata.com/resource/j6b8-wjwi.json", :target => "_blank"} https://celebratingcities.data.socrata.com/resource/j6b8-wjwi.json

                  %p That url, found on the dataset page, will be your API endpoint. Now let's move on to doing some sample queries.

                  %h2#sec1 Example Queries
                  %p
                    %strong Simple Filters
                  %p
                    Filtering data is very straightforward. SODA APIs are self-describing — the schema and contents of the dataset itself determines how you can query it. Any field within the data can be used as a filter, simply by appending it to the API endpoint as a GET parameter. For example, to query for only
                    %code BURGLARY
                    offences, simply append
                    %code ?offense=BURGLARY
                    to the url:
                  %pre
                    %a{:href => "https://celebratingcities.data.socrata.com/resource/j6b8-wjwi.json?offense=BURGLARY", :target => "_blank"} https://celebratingcities.data.socrata.com/resource/j6b8-wjwi.json?offense=BURGLARY

                  %p
                    Additional filters can be added, and the filters will be
                    = succeed "ed" do
                      %code.highlighter-rouge AND
                  .well
                    Read the detailed documentation on
                    %a{:href => "https://dev.socrata.com/docs/filtering.html", :target => "_blank"} Filtering Datasets
                    for more info.

                  %p
                    %strong SoQL Queries
                  %p
                    The “Socrata Query Language” (SoQL) is a simple, SQL-like query language specifically designed for making it easy to work with data on the web. The language is both powerful and easy to learn, and everything works via GET parameters. For example, to search for crimes in in Dupont Circle:
                  %pre
                    %a{:href => "https://celebratingcities.data.socrata.com/resource/j6b8-wjwi.json?$where=within_box(the_geom, 38.9056366947, -77.0466792583, 38.911497437, -77.0384395123)", :target => "_blank"} https://celebratingcities.data.socrata.com/resource/j6b8-wjwi.json?$where=within_box(the_geom, 38.9056366947, -77.0466792583, 38.911497437, -77.0384395123)

                  .well
                    Many different functions are available via SoQL. Read the detailed documentation on
                    %a{:href => "https://dev.socrata.com/docs/queries/", :target => "_blank"} SoQL Queries
                    for more info.

















                  %p --------------------------------------------------------------------
                  %p
                    The GeoService API link will provide the REST query service which also provides links
                    to the service's metadata. To query the layer, you can either construct a query string manually or
                    use the online form provided.
                  %p
                    To use the GeoService, navigate to the layer in question and pull the base url from the
                    %a{:href => "http://celebratingcities.deloittegeo.opendata.arcgis.com/"} opendata page
                    %pre http://services.arcgis.com/VTyQ9soqVukalItT/ArcGIS/rest/services/FairMarketRents/FeatureServer/0/query?where=1=1&outFields=*&outSR=4326&objectids=1&f=geojson
                    %h2#sec1 Example Queries
                    %p A good place to begin is in collecting all the HUD subsidized Multi-Family properties.
                    %p
                      %strong Subsidized Multifamily Properties
                    %p The corresponding field allows you to query for all HUD subsidized MF properties:
                    %pre is_subsidized_ind='Y'
                    %p
                      To construct the query, we'll take the base URL, and replace the where statement "1=1"
                      with any valid SQL where statement. So for this example, we'd construct this query:
                    %pre http://services.arcgis.com/VTyQ9soqVukalItT/ArcGIS/rest/services/MultiFamilyProperties/FeatureServer/0/query?where=IS_SUBSIDIZED_IND='Y'&outFields=*&outSR=4326&objectids=1&f=geojson
                    %p
                      %strong Project-based Section 8 Properties
                    %p A logical second step would be to query the Multi-Family Properties layer for low income, and the corresponding field for project-based Section 8 properties is:
                    %pre is_sec8_ind='Y'
                    %p
                      so the query http string that returns the data in geojson looks like this:
                    %pre#elderly
                      http://services.arcgis.com/VTyQ9soqVukalItT/arcgis/rest/services/MultiFamilyProperties/FeatureServer/0//query?
                      %strong> where=is_sec8_ind='Y'
                      \&f=pgeojson
                    %p
                      Since we're focusing on Seattle, here's how we would set our input geometry:
                    %pre {"xmin":-13676570.60682338,"ymin":6018679.182711435,"xmax":-13559316.205433873,"ymax":6064541.399682558,"spatialReference":{"wkid":102100}}
                    %p
                      We then include this directly in our query using the geometry parameter:
                    %pre
                      http://services.arcgis.com/VTyQ9soqVukalItT/arcgis/rest/services/MultiFamilyProperties/FeatureServer/0/query?where=is_sec8_ind%3D%27Y%27&
                      %strong> geometry={"xmin":-13676570.60682338,"ymin":6018679.182711435,"xmax":-13559316.205433873,"ymax":6064541.399682558,"spatialReference":{"wkid":102100}}
                      \&f=pgeojson
                    %p
                      %strong Multifamily Elderly and Disabled Properties
                    %p
                      For this query, we'll need to combine a few different criteria. These include:
                    %pre#allquery
                      (1) is_sec8_202='Y'
                      %br
                        (2) IS_811_CAPITAL_ADVANCE_IND='Y'
                        %br
                          (3) IS_PAC_811_IND='Y'
                          %br (4) IS_PRAC_811_IND='Y'
                    %p
                      To combine critera, we can use logic statments in the URL call. To include this, add the criteria
                      to the where statement with AND/OR between each criteria, as shown in the example below:
                    %pre
                      http://services.arcgis.com/VTyQ9soqVukalItT/arcgis/rest/services/MultiFamilyProperties/FeatureServer/0/query?
                      %strong> where=IS_811_CAPITAL_ADVANCE_IND='Y'+OR+IS_PAC_811_IND='Y'+OR+IS_PRAC_811_IND='Y'
                      \&f=pgeojson
                    %p
                      Lastly, lets trim the results down to return Seattle results only.
                    %pre
                      http://services.arcgis.com/VTyQ9soqVukalItT/arcgis/rest/services/MultiFamilyProperties/FeatureServer/0/query?
                      %strong> where=HUB_NAME_TEXT='Seattle'+AND+(IS_811_CAPITAL_ADVANCE_IND='Y'+OR+IS_PAC_811_IND='Y'+OR+IS_PRAC_811_IND='Y')
                      \&f=pgeojson
                    %hr
                      %h2#sec2 All Query Parameters
                      .table-responsive
                        %table.table
                          %thead
                            %tr
                              %th Parameter
                              %th Description
                          %tbody
                            %tr
                              %td Where
                              %td
                                A where clause for the query filter. Any legal SQL where clause operating on the fields
                                in the layer is allowed.
                            %tr
                              %td Object IDs
                              %td The object IDs of this layer/table to be queried.
                            %tr
                              %td Time
                              %td
                                The time instant or the time extent to query.
                                %br
                                  %strong Time instant
                                  %br
                                    %em Syntax:&nbsp
                                    %span.code time=timeInstant
                                    %br
                                      %em Example:&nbsp
                                      %span.code time=1199145600000
                                      %br
                                        %strong Time extent
                                        %br
                                          %em Syntax:&nbsp
                                          %span.code time=startTime, endTime
                                          %br
                                            %em Example:&nbsp
                                            %span.code time=1199145600000, 1230768000000
                                            %br
                            %tr
                              %td Input Geometry
                              %td
                                The geometry to apply as the spatial filter. The structure of the geometry
                                is the same as the structure of the json geometry objects returned by the
                                ArcGIS REST API. In addition to the json structures, for envelopes and points,
                                you can specify the geometry with a simpler comma-separated syntax.
                                %br
                                  %em Syntax:
                                  %br
                                    %ul{:style => "margin-left:15px"}
                                      %li
                                        json structures:&nbsp
                                        %span.code geometryType=&ltgeometryType&gt&geometry={geometry}
                                      %li
                                        Envelope simple syntax:&nbsp
                                        %span.code geometryType=esriGeometryEnvelope&geometry=&ltxmin&gt,&ltymin&gt,&ltxmax&gt,&ltymax&gt}
                                      %li
                                        Point simple syntax:&nbsp
                                        %span.code geometryType=esriGeometryPoint&geometry=&ltx&gt,&lty&gt
                                    %em Examples:
                                    %br
                                      %ul{:style => "margin-left:15px"}
                                        %li
                                          %span.code geometryType=&ltgeometryType&gt&geometry={xmin: -104, ymin: 35.6, xmax: -94.32, ymax: 41}
                                        %li
                                          %span.code geometryType=esriGeometryEnvelope&geometry=-104,35.6,-94.32,41
                                        %li
                                          %span.code geometryType=esriGeometryPoint&geometry=-104,35.6
                            %tr
                              %td Geometry Type
                              %td
                                The type of geometry specified by the geometry parameter. The geometry type can be an envelope,
                                point, line, or polygon. The default geometry type is an envelope.
                                %br
                                  %em Values:
                                  %span.code &nbspesriGeometryPoint | esriGeometryMultipoint | esriGeometryPolyline | esriGeometryPolygon | esriGeometryEnvelope
                            %tr
                              %td Input Spatial Reference
                              %td
                                The spatial relationship to be applied on the input geometry while performing the query. The
                                supported spatial relationships include intersects, contains, envelope intersects, within, etc.
                                The default spatial relationship is intersects (esriSpatialRelIntersects).
                                = succeed "&amp;nbsp" do
                                  %em Options are:
                                intersects, contains, crosses, envelope intersects, index intersects,
                                overlaps,
                                touches, and within.
                            %tr
                              %td Distance
                              %td Distance to buffer input geometry.
                            %tr
                              %td Units
                              %td
                                Return distance values in the specified units. Options are meters, miles, feet, kilometers,
                                nautical miles, and US nautical miles.
                            %tr
                              %td Out Fields
                              %td Attribute fields to include in response. Default is all (*).
                            %tr
                              %td Return Geometry
                              %td Boolean parameter. If 'true', each feature in the FeatureSet includes the geometry.
                            %tr
                              %td Max Allowable Offset
                              %td
                                The maximum allowable offset used for generalizing geometries returned by the query operation.
                            %tr
                              %td Geometry Precision
                              %td Specify the number of decimal places for the geometries returned by the query operation.
                            %tr
                              %td Output Spatial Reference
                              %td The spatial reference for the returned geometry.
                            %tr
                              %td Return IDs Only
                              %td
                                If true, the response only includes an array of object IDs. Otherwise the response is a feature
                                set. The default is false.
                            %tr
                              %td Return Count Only
                              %td
                                If true, the response only includes the count (number of features/records) that would be
                                returned by a query. Otherwise the response is a feature set. The default is false. This option
                                supersedes the returnIdsOnly parameter.
                            %tr
                              %td Return Extent Only
                              %td Boolean parameter set to return the query features extent only.
                            %tr
                              %td Order By Fields
                              %td
                                One or more field names using the features/records that need to be ordered. Use ASC or DESC for
                                ascending or desending order respectively.
                            %tr
                              %td Group By Fields
                              %td Group by fields (for statistics).
                            %tr
                              %td Output Statistics
                              %td The definitions for one or more field-based statistics to be calculated.
                            %tr
                              %td Result Offset
                              %td
                                This option can be used for fetching query results by skipping the specified number of records
                                and starts from the next record (i.e.resultOffset + 1th). The Default is 0.
                            %tr
                              %td Result Record Count
                              %td
                                This option can be used for fetching query results up to the resultRecordCount specified. When
                                resultOffset is specified but this parameter is not, map service defaults it to maxRecordCount.
                                The maximum value for this parameter is the value of the layer's maxRecordCount property.
                            %tr
                              %td ReturnZ
                              %td
                                If true, the Z values will be included in the results if the features have Z values. Otherwise Z
                                values are not returned. The default is false.
                            %tr
                              %td ReturnM
                              %td
                                If true, M values will be included in the results if the features have m values. Otherwise, M
                                values are not returned. The default is false.
                            %tr
                              %td Quantization Parameters
                              %td Used to project the geometry onto a virtual grid, likely representing pixels on the screen.
                            %tr
                              %td Format
                              %td The response format. Default format is html but options include html, json, and geojson
                      %hr
                        #footerwrap
                          .container.text-center
                            / <div class="row">
                            .col-md-6
                              %h4 About the Event
                              .hline-w
                              %p
                                Since day one, our mission has been to connect people with reliable rides through the use of data and
                                technology. As our footprint has grown throughout the years, so has our ability to use the Uber
                                network in different ways.
                            .col-md-6
                              %h4 Social Links
                              .hline-w
                              %p#slinks
                                %a{:href => "https://twitter.com/Uber_DC", :target => "_blank"}
                                  %i.fa.fa-twitter
                                %a{:href => "https://www.facebook.com/uber", :target => "_blank"}
                                  %i.fa.fa-facebook
                                %a{:href => "https://www.linkedin.com/company/uber-com", :target => "_blank"}
                                  %i.fa.fa-linkedin
                                %a{:href => "https://instagram.com/Uber_DC", :target => "_blank"}
                                  %i.fa.fa-instagram
                            / <div class="col-lg-4">
                            / <h4>Event Location</h4>
                            / <div class="hline-w"></div>
                            / <p>
                            / 1717 Rhode Island Ave<br/>
                            / 2nd Floor<br/>
                            / Washington, DC 20036<br/>
                            / </p>
                            / </div>
                        :javascript
                          $(window).bind('scroll', function (e) {
                              parallaxScroll();
                          });

                          function parallaxScroll() {
                              var scrolled = $(window).scrollTop(),
                                  w = window.innerWidth;
                              $('#banner-head').css('top', (0 - (scrolled * .28)) + 'px');
                              if(w>991){
                                  $('#leftCol').css('top', scrolled + 'px');
                              } else {
                                  $('#leftCol').css('top', '0px');
                              }
                          }

                          $(function() {
                              $('a[href*=#]:not([href=#])').click(function() {
                                  if (location.pathname.replace(/^\//,'') == this.pathname.replace(/^\//,'') && location.hostname == this.hostname) {
                                      var target = $(this.hash);
                                      target = target.length ? target : $('[name=' + this.hash.slice(1) +']');
                                      if (target.length) {
                                          $('html,body').animate({
                                              scrollTop: (target.offset().top-60)
                                          }, 1000);
                                          return false;
                                      }
                                  }
                              });
                          });

                        / Toggle Controls
                        :javascript
                          $('.table-head').click(function () {
                              $(this).nextUntil('.table-head').slideToggle(0);
                          });

                          $(window).bind('load', function () {
                              $('.table-head').nextUntil('.table-head').slideToggle(0);
                          });

                        %script{:src => "js/search.js"}
                        :javascript
                          (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
                                      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
                                  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
                          })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

                          ga('create', 'UA-73708134-1', 'auto');
                          ga('send', 'pageview');